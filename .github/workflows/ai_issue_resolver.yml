name: AI Issue Resolver (Experimental)

on:
  workflow_dispatch: # Allows manual triggering
    inputs:
      issue_number:
        description: 'Optional: Specific issue number to process (leave blank to process a batch)'
        required: false
        default: ''
      max_issues_to_process:
        description: 'Maximum number of open issues to attempt to process in this run'
        required: false
        default: '1'
      allow_pr_creation:
        description: 'Set to "true" to allow the script to create Pull Requests'
        required: true
        default: 'false' # Default to false for safety

permissions:
  contents: write      # To create branches, commit, push
  issues: read         # To read issues
  pull-requests: write # To create pull requests

jobs:
  resolve_issues_with_ai:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }} # CRITICAL: Store your Gemini API Key as a secret
      TARGET_BRANCH: main # Or your development branch like 'develop'
      GEMINI_MODEL: "gemini-2.5-pro-preview-05-06" 
      GIT_COMMIT_USER_NAME: "AI Issue Resolver Bot"
      GIT_COMMIT_USER_EMAIL: "ai-bot@users.noreply.github.com"
      GITHUB_REPOSITORY_NWO: ${{ github.repository }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} 
          fetch-depth: 0 

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub requests google-generativeai 
          sudo apt-get update && sudo apt-get install -y gh 

      - name: Create Script Directory
        run: mkdir -p .github/scripts

      - name: Create AI Issue Processor Script (Conceptual)
        run: |
          cat << 'EOF' > .github/scripts/ai_issue_processor.py
          # Conceptual Python Script: .github/scripts/ai_issue_processor.py
          import os
          import sys
          import json
          import time
          from github import Github, GithubException, UnknownObjectException
          import google.generativeai as genai
          import subprocess
          import fnmatch # For file extension matching

          # --- Configuration ---
          GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
          GEMINI_MODEL_NAME = os.getenv('GEMINI_MODEL', 'gemini-2.5-pro-preview-05-06')
          GH_TOKEN = os.getenv('GH_TOKEN')
          REPO_NWO = os.getenv('GITHUB_REPOSITORY_NWO') 
          TARGET_BRANCH = os.getenv('TARGET_BRANCH', 'main')
          GIT_COMMIT_USER_NAME = os.getenv('GIT_COMMIT_USER_NAME')
          GIT_COMMIT_USER_EMAIL = os.getenv('GIT_COMMIT_USER_EMAIL')
          
          ISSUE_NUMBER_INPUT = os.getenv('INPUT_ISSUE_NUMBER', '') 
          MAX_ISSUES_TO_PROCESS = int(os.getenv('INPUT_MAX_ISSUES_TO_PROCESS', 1))
          ALLOW_PR_CREATION = os.getenv('INPUT_ALLOW_PR_CREATION', 'false').lower() == 'true'

          # Directories to scan for code context
          DIRECTORIES_TO_SCAN = ['src', 'test', 'data'] 
          # File extensions to include (add more as needed)
          RELEVANT_EXTENSIONS = ['*.cpp', '*.h', '*.ino', '*.py', '*.js', '*.html', '*.css', '*.md', '*.yml', '*.json', '*.txt', '*.csv', '*.S']
          # Max characters for the entire code context (to prevent overly large prompts)
          # Gemini 1.5 Pro has a 1M token limit. 1 token ~ 4 chars. So ~4M chars.
          # Let's set a more conservative limit for the raw text here, e.g., 2MB of characters.
          # You'll need to tune this based on your project and API limits.
          MAX_CONTEXT_CHARS = 2 * 1024 * 1024 # 2MB

          if not GEMINI_API_KEY:
              print("Error: GEMINI_API_KEY environment variable not set.")
              sys.exit(1)
          # ... (other environment variable checks) ...

          genai.configure(api_key=GEMINI_API_KEY)
          g = Github(GH_TOKEN)
          try:
              repo = g.get_repo(REPO_NWO)
          except GithubException as e:
              print(f"Error: Could not get repository '{REPO_NWO}'. Details: {e}")
              sys.exit(1)

          # --- Helper Functions ---
          def get_issues_to_process():
              # ... (same as before) ...
              issues_to_process = []
              if ISSUE_NUMBER_INPUT:
                  try:
                      issue = repo.get_issue(number=int(ISSUE_NUMBER_INPUT))
                      if issue.state == 'open':
                          issues_to_process.append(issue)
                      else:
                          print(f"Issue #{ISSUE_NUMBER_INPUT} is not open. Skipping.")
                  except GithubException as e:
                      print(f"Error fetching issue #{ISSUE_NUMBER_INPUT}: {e}")
                  except ValueError:
                      print(f"Error: Invalid issue number provided: {ISSUE_NUMBER_INPUT}")
              else:
                  open_issues = repo.get_issues(state='open', sort='created', direction='asc')
                  count = 0
                  for issue in open_issues:
                      if count < MAX_ISSUES_TO_PROCESS:
                          branch_name = f"ai-fix/issue-{issue.number}"
                          try:
                              repo.get_branch(branch=branch_name)
                              print(f"Branch {branch_name} already exists for issue #{issue.number}. Skipping.")
                              continue 
                          except GithubException: 
                              pass
                          
                          issues_to_process.append(issue)
                          count += 1
                      else:
                          break
              return issues_to_process


          def get_entire_codebase_context():
              print("Attempting to fetch entire codebase context from specified directories...")
              full_context = "Full Codebase Context:\n"
              current_chars = 0

              for dir_path in DIRECTORIES_TO_SCAN:
                  if not os.path.isdir(dir_path):
                      print(f"  Warning: Directory '{dir_path}' not found in repository root. Skipping.")
                      continue
                  
                  print(f"  Scanning directory: {dir_path}")
                  for root, _, files in os.walk(dir_path):
                      for filename in files:
                          include_file = any(fnmatch.fnmatch(filename, pat) for pat in RELEVANT_EXTENSIONS)
                          if include_file:
                              file_path = os.path.join(root, filename)
                              try:
                                  with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                                      content = f.read()
                                  
                                  file_entry = f"File: {file_path}\n---\n{content}\n---\n\n"
                                  
                                  if current_chars + len(file_entry) > MAX_CONTEXT_CHARS:
                                      print(f"  Warning: Maximum context size ({MAX_CONTEXT_CHARS} chars) reached. Stopping file inclusion.")
                                      full_context += "Context truncated due to size limits.\n"
                                      return full_context
                                  
                                  full_context += file_entry
                                  current_chars += len(file_entry)
                                  print(f"    Added context from: {file_path} ({len(content)} chars)")
                              except Exception as e:
                                  print(f"    Error reading file {file_path}: {e}")
              
              if current_chars == 0:
                  full_context += "No relevant files found in specified directories or directories do not exist.\n"
              
              print(f"Total characters in context: {current_chars}")
              return full_context

          def call_gemini_api(prompt_text):
              # ... (same as before, ensure it can handle large prompts if MAX_CONTEXT_CHARS is large) ...
              print(f"Calling Gemini API (Model: {GEMINI_MODEL_NAME})...")
              try:
                  model = genai.GenerativeModel(GEMINI_MODEL_NAME)
                  response = model.generate_content(
                      prompt_text,
                      generation_config=genai.types.GenerationConfig(
                          temperature=0.2, 
                          max_output_tokens=8192 
                      )
                  )
                  if response.candidates and response.candidates[0].content and response.candidates[0].content.parts:
                      return response.candidates[0].content.parts[0].text
                  else:
                      print("Warning: Gemini API response structure not as expected or empty.")
                      print(f"Full response parts: {response.parts if hasattr(response, 'parts') else 'N/A'}")
                      print(f"Full candidates: {response.candidates if hasattr(response, 'candidates') else 'N/A'}")
                      return None
              except Exception as e:
                  print(f"Error calling Gemini API: {e}")
                  return None

          def parse_and_apply_changes(ai_response_text, current_branch_name):
              # ... (same placeholder as before, needs significant development) ...
              print("Parsing AI response and attempting to apply changes...")
              applied_changes = False
              if not ai_response_text:
                  print("  AI response is empty. No changes to apply.")
                  return False
              try:
                  print("  AI Response to parse (first 500 chars): " + ai_response_text[:500])
                  file_blocks = ai_response_text.split("FILENAME: ")
                  for block in file_blocks:
                      if not block.strip():
                          continue
                      
                      lines = block.split('\n', 1)
                      if not lines or len(lines) < 2: # Ensure there's content after filename
                          continue
                      
                      file_path_to_change = lines[0].strip()
                      if not file_path_to_change: 
                          continue

                      if "```" not in lines[1]:
                          print(f"  Skipping block for '{file_path_to_change}', no code block found after filename.")
                          continue
                      
                      # Extract content between the first pair of ```
                      try:
                          code_section = lines[1].split("```", 2)
                          if len(code_section) < 2: # Should have content before, between, and after ```
                              print(f"  Skipping block for '{file_path_to_change}', could not clearly parse code block (not enough ```).")
                              continue
                          
                          code_content_with_lang = code_section[1] # Content is between the first pair
                      except IndexError:
                          print(f"  Skipping block for '{file_path_to_change}', error splitting by ```.")
                          continue

                      actual_code = ""
                      if '\n' in code_content_with_lang:
                          first_code_line, rest_of_code_block = code_content_with_lang.split('\n', 1)
                          if first_code_line.strip().isalnum() and len(first_code_line.strip()) <= 10: # Simple lang check
                              actual_code = rest_of_code_block
                          else:
                              actual_code = code_content_with_lang 
                      else: 
                          actual_code = code_content_with_lang

                      dir_name = os.path.dirname(file_path_to_change)
                      if dir_name: 
                          os.makedirs(dir_name, exist_ok=True)
                          
                      with open(file_path_to_change, "w") as f:
                          f.write(actual_code.strip() + "\n") 
                      print(f"  Applied changes to: {file_path_to_change}")
                      applied_changes = True

              except Exception as e:
                  print(f"Error during parsing or applying changes: {e}")
                  return False
              
              if not applied_changes:
                  print("No specific file changes were parsed and applied from AI response.")
              return applied_changes

          def run_git_command(command_list, ignore_error=False):
              # ... (same as before) ...
              try:
                  print(f"Running git command: {' '.join(command_list)}")
                  result = subprocess.run(command_list, check=not ignore_error, capture_output=True, text=True)
                  print(f"STDOUT: {result.stdout.strip()}")
                  if result.stderr:
                      print(f"STDERR: {result.stderr.strip()}")
                  return True if result.returncode == 0 else False
              except subprocess.CalledProcessError as e:
                  print(f"Git command failed: {' '.join(command_list)}")
                  print(f"Return code: {e.returncode}")
                  print(f"STDOUT: {e.stdout.strip()}")
                  print(f"STDERR: {e.stderr.strip()}")
                  return False
              except FileNotFoundError:
                  print(f"Error: git command not found. Ensure git is installed and in PATH.")
                  return False

          # --- Main Processing Logic ---
          def main():
              # ... (setup and issue fetching same as before) ...
              print(f"Starting AI Issue Resolver for repository: {REPO_NWO}")
              print(f"Target branch for PRs: {TARGET_BRANCH}")
              print(f"Allow PR Creation: {ALLOW_PR_CREATION}")

              issues = get_issues_to_process()
              if not issues:
                  print("No open issues found to process based on criteria.")
                  return

              original_branch_or_commit = subprocess.run(["git", "rev-parse", "--abbrev-ref", "HEAD"], capture_output=True, text=True).stdout.strip()
              if original_branch_or_commit == "HEAD": 
                  original_branch_or_commit = subprocess.run(["git", "rev-parse", "HEAD"], capture_output=True, text=True).stdout.strip()

              # Get the full codebase context ONCE before looping through issues if it's static per run
              # If context needs to be dynamic per issue, move this inside the loop
              full_codebase_prompt_context = get_entire_codebase_context()


              for issue in issues:
                  print(f"\nProcessing Issue #{issue.number}: {issue.title}")
                  
                  branch_name = f"ai-fix/issue-{issue.number}"
                  
                  run_git_command(["git", "checkout", TARGET_BRANCH])
                  run_git_command(["git", "pull", "origin", TARGET_BRANCH]) 
                  run_git_command(["git", "branch", "-D", branch_name], ignore_error=True) 
                  
                  if not run_git_command(["git", "checkout", "-b", branch_name, f"origin/{TARGET_BRANCH}"]):
                      print(f"Failed to create or checkout branch {branch_name}. Skipping issue.")
                      run_git_command(["git", "checkout", original_branch_or_commit]) 
                      continue 

                  # No longer calling get_relevant_code_context per issue, using full_codebase_prompt_context
                  
                  prompt = (
                      f"You are an expert software developer tasked with fixing a GitHub issue for the repository '{REPO_NWO}'.\n"
                      f"Issue Number: #{issue.number}\n"
                      f"Issue Title: {issue.title}\n"
                      f"Issue Description:\n{issue.body if issue.body else 'No description provided.'}\n\n"
                      f"The following is the content of the project's relevant source files:\n{full_codebase_prompt_context}\n\n" # Use the full context
                      f"Your task is to provide the necessary code changes to resolve this issue based on the provided codebase and issue details.\n"
                      f"Output ONLY the complete new content for each file that needs to be modified.\n"
                      f"Format your response strictly as follows for EACH modified file:\n"
                      f"FILENAME: path/to/your/file.ext\n"
                      f"```[optional_language_specifier_e.g.cpp]\n"
                      f"// New, complete content for the file goes here\n"
                      f"```\n"
                      f"Ensure the file path is relative to the repository root (e.g., src/main.cpp, test/some_test.cpp).\n"
                      f"If multiple files need changes, repeat the FILENAME and code block structure for each.\n"
                      f"If no code changes are needed, or if you cannot resolve the issue, respond with ONLY the text: NO_CHANGES_NEEDED\n"
                  )
                  
                  # ... (rest of the main loop for AI call, parsing, git ops, PR creation is the same) ...
                  ai_response = call_gemini_api(prompt)
                  
                  if ai_response and "NO_CHANGES_NEEDED" not in ai_response :
                      print(f"AI Response for issue #{issue.number} (first 500 chars):\n{ai_response[:500]}...") 
                      if parse_and_apply_changes(ai_response, branch_name):
                          print(f"Code changes applied for issue #{issue.number}.")
                          if not run_git_command(["git", "add", "."]):
                              print(f"Failed to git add changes for issue #{issue.number}. Cleaning up branch.")
                              run_git_command(["git", "checkout", TARGET_BRANCH]) 
                              run_git_command(["git", "branch", "-D", branch_name], ignore_error=True) 
                              continue

                          commit_message = f"AI fix for issue #{issue.number}: {issue.title}"
                          if not run_git_command(["git", "commit", "-m", commit_message]):
                              print(f"Failed to git commit changes for issue #{issue.number}. Cleaning up branch.")
                              run_git_command(["git", "checkout", TARGET_BRANCH]) 
                              run_git_command(["git", "branch", "-D", branch_name], ignore_error=True)
                              continue

                          if not run_git_command(["git", "push", "-u", "origin", branch_name, "--force"]): 
                              print(f"Failed to git push branch {branch_name} for issue #{issue.number}.")
                              run_git_command(["git", "checkout", TARGET_BRANCH])
                              continue
                              
                          if ALLOW_PR_CREATION:
                              pr_title = f"AI Fix for Issue #{issue.number}: {issue.title}"
                              pr_body = (
                                  f"This PR was automatically generated by an AI assistant to address issue #{issue.number}.\n"
                                  f"**Please review the changes carefully.**\n\n"
                                  f"**Issue Details:**\nTitle: {issue.title}\n"
                                  f"Link: {issue.html_url}\n\n"
                                  f"**AI Suggestion Summary (first 500 chars of response):**\n```\n{ai_response[:500]}...\n```"
                              )
                              pr_command = [
                                  "gh", "pr", "create",
                                  "--base", TARGET_BRANCH,
                                  "--head", branch_name,
                                  "--title", pr_title,
                                  "--body", pr_body
                              ]
                              try:
                                  print(f"Creating PR for branch {branch_name}...")
                                  pr_result = subprocess.run(pr_command, check=True, capture_output=True, text=True)
                                  print(f"Successfully created PR for issue #{issue.number}: {pr_result.stdout.strip()}")
                              except subprocess.CalledProcessError as e:
                                  print(f"Failed to create PR for issue #{issue.number}: {e.stderr.strip()}")
                          else:
                              print(f"PR creation is disabled. Branch {branch_name} pushed for issue #{issue.number}. Manual PR needed.")
                      else:
                          print(f"No changes applied or error during application for issue #{issue.number}.")
                          run_git_command(["git", "checkout", TARGET_BRANCH]) 
                          run_git_command(["git", "branch", "-D", branch_name], ignore_error=True)
                  elif ai_response and "NO_CHANGES_NEEDED" in ai_response:
                      print(f"AI indicated no changes needed for issue #{issue.number}.")
                      run_git_command(["git", "checkout", TARGET_BRANCH]) 
                      run_git_command(["git", "branch", "-D", branch_name], ignore_error=True)
                  else: 
                      print(f"No response or error from AI for issue #{issue.number}.")
                      run_git_command(["git", "checkout", TARGET_BRANCH]) 
                      run_git_command(["git", "branch", "-D", branch_name], ignore_error=True)
                  
                  print(f"Finished processing issue #{issue.number}.")
                  
                  if MAX_ISSUES_TO_PROCESS > 1 and issues.index(issue) < len(issues) - 1 :
                      print("Waiting for 60 seconds before processing next issue to avoid rate limits...")
                      time.sleep(60)
              
              run_git_command(["git", "checkout", original_branch_or_commit])
              print("AI Issue Resolver run finished.")

          if __name__ == "__main__":
              run_git_command(["git", "config", "--global", "user.name", GIT_COMMIT_USER_NAME])
              run_git_command(["git", "config", "--global", "user.email", GIT_COMMIT_USER_EMAIL])
              main()
          EOF
          chmod +x .github/scripts/ai_issue_processor.py

      - name: Run AI Issue Processor Script
        env: 
          INPUT_ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
          INPUT_MAX_ISSUES_TO_PROCESS: ${{ github.event.inputs.max_issues_to_process }}
          INPUT_ALLOW_PR_CREATION: ${{ github.event.inputs.allow_pr_creation }}
        run: python .github/scripts/ai_issue_processor.py 
