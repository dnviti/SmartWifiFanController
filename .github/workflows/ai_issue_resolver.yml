name: AI Issue Resolver (Experimental)

on:
  workflow_dispatch: # Allows manual triggering
    inputs:
      issue_number:
        description: 'Optional: Specific issue number to process (leave blank to process a batch)'
        required: false
        default: ''
      issue_label:
        description: 'Optional: Process issues with this specific label (e.g., bug, enhancement, documentation, refactor). Leave blank for any.'
        required: false
        default: 'bug'
        type: string
      gemini_model_override: # New input for model override
        description: 'Optional: Override the default Gemini model (e.g., gemini-1.5-pro-latest). Default is gemini-2.5-flash-preview-05-20.'
        required: false
        default: 'gemini-2.5-flash-preview-05-20'
        type: string
      max_issues_to_process:
        description: 'Maximum number of open issues to attempt to process in this run'
        required: false
        default: '1'
      allow_pr_creation:
        description: 'Set to "true" to allow the script to create Pull Requests'
        required: true
        default: 'false' # Default to false for safety

permissions:
  contents: write      # To create branches, commit, push
  pull-requests: write # To create pull requests
  issues: write        # To read issues, write comments, and manage labels

jobs:
  resolve_issues_with_ai:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }} 
      TARGET_BRANCH: develop 
      GEMINI_MODEL_DEFAULT: "gemini-2.5-flash-preview-05-20" # Updated default model
      GIT_COMMIT_USER_NAME: "AI Issue Resolver Bot"
      GIT_COMMIT_USER_EMAIL: "ai-bot@users.noreply.github.com"
      GITHUB_REPOSITORY_NWO: ${{ github.repository }}
      AI_PR_CREATED_LABEL: "ai-pr-created" 

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} 
          fetch-depth: 0 

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub requests google-generativeai 
          sudo apt-get update && sudo apt-get install -y gh 

      - name: Create Script Directory
        run: mkdir -p .github/scripts

      - name: Create AI Issue Processor Script (Conceptual)
        run: |
          cat << 'EOF' > .github/scripts/ai_issue_processor.py
          # Conceptual Python Script: .github/scripts/ai_issue_processor.py
          import os
          import sys
          import json
          import time
          from github import Github, GithubException, UnknownObjectException
          import google.generativeai as genai
          import subprocess
          import fnmatch 
          import re 

          # --- Configuration ---
          GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
          # Get model from workflow input if provided, else use default from env
          GEMINI_MODEL_OVERRIDE = os.getenv('INPUT_GEMINI_MODEL_OVERRIDE', '')
          GEMINI_MODEL_DEFAULT_FROM_ENV = os.getenv('GEMINI_MODEL_DEFAULT', 'gemini-2.5-flash-preview-05-20')
          GEMINI_MODEL_NAME = GEMINI_MODEL_OVERRIDE if GEMINI_MODEL_OVERRIDE else GEMINI_MODEL_DEFAULT_FROM_ENV
          
          GH_TOKEN = os.getenv('GH_TOKEN') 
          REPO_NWO = os.getenv('GITHUB_REPOSITORY_NWO') 
          TARGET_BRANCH = os.getenv('TARGET_BRANCH', 'develop') 
          GIT_COMMIT_USER_NAME = os.getenv('GIT_COMMIT_USER_NAME')
          GIT_COMMIT_USER_EMAIL = os.getenv('GIT_COMMIT_USER_EMAIL')
          AI_PR_CREATED_LABEL = os.getenv('AI_PR_CREATED_LABEL', 'ai-pr-created')
          
          ISSUE_NUMBER_INPUT = os.getenv('INPUT_ISSUE_NUMBER', '') 
          ISSUE_LABEL_INPUT = os.getenv('INPUT_ISSUE_LABEL', '').lower() 
          MAX_ISSUES_TO_PROCESS = int(os.getenv('INPUT_MAX_ISSUES_TO_PROCESS', 1))
          ALLOW_PR_CREATION = os.getenv('INPUT_ALLOW_PR_CREATION', 'false').lower() == 'true'

          DIRECTORIES_TO_SCAN = ['src', 'test', 'data'] 
          RELEVANT_EXTENSIONS = ['*.cpp', '*.h', '*.ino', '*.py', '*.js', '*.html', '*.css', '*.md', '*.yml', '*.json', '*.txt', '*.csv', '*.S']
          MAX_CONTEXT_CHARS = 2 * 1024 * 1024 

          BRANCH_PREFIX_MAP = {
              "bug": "bugfix/",
              "enhancement": "feature/",
              "documentation": "docs/",
              "refactor": "refactor/"
          }
          DEFAULT_BRANCH_PREFIX = "fix/" 

          if not GEMINI_API_KEY:
              print("Error: GEMINI_API_KEY environment variable not set.")
              sys.exit(1)
          if not GH_TOKEN: 
              print("Error: GH_TOKEN environment variable not set (should be secrets.GITHUB_TOKEN).")
              sys.exit(1)
          if not REPO_NWO: 
              print("Error: GITHUB_REPOSITORY_NWO environment variable not set.")
              sys.exit(1)

          genai.configure(api_key=GEMINI_API_KEY)
          g = Github(GH_TOKEN) 
          try:
              repo = g.get_repo(REPO_NWO)
          except GithubException as e:
              print(f"Error: Could not get repository '{REPO_NWO}'. Details: {e}")
              sys.exit(1)

          # --- Helper Functions ---
          def get_issues_to_process():
              issues_to_process = []
              if ISSUE_NUMBER_INPUT:
                  try:
                      issue_obj = repo.get_issue(number=int(ISSUE_NUMBER_INPUT)) 
                      if issue_obj.state == 'open':
                          has_ai_label = any(label.name == AI_PR_CREATED_LABEL for label in issue_obj.labels)
                          has_requested_label = True 
                          if ISSUE_LABEL_INPUT: 
                              has_requested_label = any(label.name.lower() == ISSUE_LABEL_INPUT for label in issue_obj.labels)
                          
                          if has_ai_label:
                              print(f"Issue #{issue_obj.number} already has the label '{AI_PR_CREATED_LABEL}'. Skipping.")
                          elif ISSUE_LABEL_INPUT and not has_requested_label:
                              print(f"Issue #{issue_obj.number} does not have the requested label '{ISSUE_LABEL_INPUT}'. Skipping.")
                          else:
                              issues_to_process.append(issue_obj)
                      else:
                          print(f"Issue #{ISSUE_NUMBER_INPUT} is not open. Skipping.")
                  except GithubException as e:
                      print(f"Error fetching issue #{ISSUE_NUMBER_INPUT}: {e}")
                  except ValueError:
                      print(f"Error: Invalid issue number provided: {ISSUE_NUMBER_INPUT}")
              else:
                  query_params = {'state': 'open', 'sort': 'created', 'direction': 'asc'}
                  if ISSUE_LABEL_INPUT:
                      query_params['labels'] = [ISSUE_LABEL_INPUT] 
                      print(f"Fetching open issues with label: '{ISSUE_LABEL_INPUT}'")
                  else:
                      print("Fetching any open issues (no specific label requested).")

                  open_issues = repo.get_issues(**query_params)
                  count = 0
                  for issue_obj in open_issues: 
                      if count < MAX_ISSUES_TO_PROCESS:
                          has_ai_label = any(label.name == AI_PR_CREATED_LABEL for label in issue_obj.labels)
                          if has_ai_label:
                              print(f"Issue #{issue_obj.number} already has the label '{AI_PR_CREATED_LABEL}'. Skipping.")
                              continue 

                          branch_prefix = BRANCH_PREFIX_MAP.get(ISSUE_LABEL_INPUT, DEFAULT_BRANCH_PREFIX) if ISSUE_LABEL_INPUT else DEFAULT_BRANCH_PREFIX
                          if not ISSUE_LABEL_INPUT:
                              for label_obj in issue_obj.labels:
                                  if label_obj.name.lower() in BRANCH_PREFIX_MAP:
                                      branch_prefix = BRANCH_PREFIX_MAP[label_obj.name.lower()]
                                      break 

                          branch_name = f"{branch_prefix}ai-issue-{issue_obj.number}"
                          
                          try:
                              repo.get_git_ref(f"heads/{branch_name}")
                              print(f"Remote branch {branch_name} already exists for issue #{issue_obj.number}. Skipping.")
                              continue 
                          except UnknownObjectException: 
                              pass
                          except GithubException as e: 
                              print(f"Error checking remote branch {branch_name}: {e}. Proceeding cautiously.")
                              pass 
                          
                          issues_to_process.append(issue_obj)
                          count += 1
                      else:
                          break
              return issues_to_process

          def get_entire_codebase_context():
              # ... (content as before)
              print("Attempting to fetch entire codebase context from specified directories...")
              full_context = "Full Codebase Context:\n"
              current_chars = 0
              for dir_path in DIRECTORIES_TO_SCAN:
                  if not os.path.isdir(dir_path):
                      print(f"  Warning: Directory '{dir_path}' not found in repository root. Skipping.")
                      continue
                  print(f"  Scanning directory: {dir_path}")
                  for root, _, files in os.walk(dir_path):
                      for filename in files:
                          include_file = any(fnmatch.fnmatch(filename, pat) for pat in RELEVANT_EXTENSIONS)
                          if include_file:
                              file_path = os.path.join(root, filename)
                              try:
                                  with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                                      content = f.read()
                                  file_entry = f"File: {file_path}\n---\n{content}\n---\n\n"
                                  if current_chars + len(file_entry) > MAX_CONTEXT_CHARS:
                                      print(f"  Warning: Maximum context size ({MAX_CONTEXT_CHARS} chars) reached. Stopping file inclusion.")
                                      full_context += "Context truncated due to size limits.\n"
                                      return full_context
                                  full_context += file_entry
                                  current_chars += len(file_entry)
                              except Exception as e:
                                  print(f"    Error reading file {file_path}: {e}")
              if current_chars == 0:
                  full_context += "No relevant files found in specified directories or directories do not exist.\n"
              print(f"Total characters in context: {current_chars}")
              return full_context

          def call_gemini_api(prompt_text):
              # ... (content as before, uses GEMINI_MODEL_NAME which is now configurable)
              print(f"Calling Gemini API (Model: {GEMINI_MODEL_NAME})...") # Uses the determined model name
              try:
                  model = genai.GenerativeModel(GEMINI_MODEL_NAME)
                  response = model.generate_content(
                      prompt_text,
                      generation_config=genai.types.GenerationConfig(
                          temperature=0.2, 
                          max_output_tokens=8192 
                      )
                  )
                  if response.candidates and response.candidates[0].content and response.candidates[0].content.parts:
                      return response.candidates[0].content.parts[0].text
                  else:
                      print("Warning: Gemini API response structure not as expected or empty.")
                      print(f"Full response parts: {response.parts if hasattr(response, 'parts') else 'N/A'}")
                      print(f"Full candidates: {response.candidates if hasattr(response, 'candidates') else 'N/A'}")
                      return None
              except Exception as e:
                  print(f"Error calling Gemini API: {e}")
                  return None

          def parse_and_apply_changes(ai_response_text, current_branch_name):
              # ... (content as before)
              print("Parsing AI response and attempting to apply changes...")
              applied_changes = False
              if not ai_response_text:
                  print("  AI response is empty. No changes to apply.")
                  return False
              try:
                  print("  AI Response to parse (first 500 chars): " + ai_response_text[:500])
                  pattern = re.compile(
                      r"FILENAME:\s*(.*?)(?:\r\n|\r|\n)" 
                      r"```(?:[a-zA-Z0-9_.-]*)?(?:\r\n|\r|\n)" 
                      r"(.*?)(?:\r\n|\r|\n)```", 
                      re.DOTALL 
                  )
                  matches = pattern.findall(ai_response_text)
                  if not matches:
                      print("  No valid FILENAME: ... ```...``` blocks found in AI response using regex.")
                      return False
                  for match in matches:
                      file_path_to_change = match[0].strip()
                      actual_code = match[1].strip() 
                      if not file_path_to_change:
                          print("  Skipping block, filename is empty after regex match.")
                          continue
                      dir_name = os.path.dirname(file_path_to_change)
                      if dir_name: 
                          print(f"  Ensuring directory exists: {dir_name}")
                          os.makedirs(dir_name, exist_ok=True)
                      print(f"  Attempting to write to file: {file_path_to_change}")
                      with open(file_path_to_change, "w", encoding='utf-8') as f: 
                          f.write(actual_code + "\n") 
                      print(f"  Successfully applied changes to: {file_path_to_change}")
                      applied_changes = True
              except Exception as e:
                  print(f"Error during parsing or applying changes: {e}")
                  return False
              if not applied_changes:
                  print("No specific file changes were parsed and applied from AI response.")
              return applied_changes

          def run_git_command(command_list, ignore_error=False, work_dir=None):
              # ... (content as before)
              try:
                  print(f"Running command: {' '.join(command_list)} {'in ' + work_dir if work_dir else ''}")
                  github_token_env = os.getenv('GITHUB_TOKEN', 'Not Set')
                  print(f"  (Using GITHUB_TOKEN from env: ...{github_token_env[-4:] if len(github_token_env) > 4 else '****'})")
                  
                  result = subprocess.run(command_list, check=not ignore_error, capture_output=True, text=True, cwd=work_dir)
                  stdout_clean = result.stdout.strip()
                  stderr_clean = result.stderr.strip()
                  if stdout_clean: print(f"STDOUT: {stdout_clean}")
                  if stderr_clean: print(f"STDERR: {stderr_clean}")
                  return True if result.returncode == 0 else False
              except subprocess.CalledProcessError as e:
                  print(f"Git command failed: {' '.join(command_list)}")
                  print(f"Return code: {e.returncode}")
                  if e.stdout: print(f"STDOUT: {e.stdout.strip()}")
                  if e.stderr: print(f"STDERR: {e.stderr.strip()}")
                  return False
              except FileNotFoundError:
                  print(f"Error: command not found (is git or gh installed and in PATH?). Command: {command_list[0]}")
                  return False

          # --- Main Processing Logic ---
          def main():
              print(f"Starting AI Issue Resolver for repository: {REPO_NWO}")
              print(f"Using Gemini Model: {GEMINI_MODEL_NAME}") # Log the model being used
              print(f"Target branch for PRs: {TARGET_BRANCH}") 
              print(f"Allow PR Creation: {ALLOW_PR_CREATION}")
              print(f"Label for processed issues: {AI_PR_CREATED_LABEL}")
              if ISSUE_LABEL_INPUT:
                  print(f"Filtering for issues with label: '{ISSUE_LABEL_INPUT}'")

              if ALLOW_PR_CREATION:
                  print("Note: PR creation will use the default GITHUB_TOKEN. Ensure your repository settings allow Actions to create PRs.")

              issues = get_issues_to_process()
              if not issues:
                  print("No open issues found to process based on criteria.")
                  return

              original_branch_or_commit = subprocess.run(["git", "rev-parse", "--abbrev-ref", "HEAD"], capture_output=True, text=True).stdout.strip()
              if original_branch_or_commit == "HEAD": 
                  original_branch_or_commit = subprocess.run(["git", "rev-parse", "HEAD"], capture_output=True, text=True).stdout.strip()
              print(f"Original branch/commit: {original_branch_or_commit}")

              full_codebase_prompt_context = get_entire_codebase_context()

              for issue_obj in issues: 
                  print(f"\nProcessing Issue #{issue_obj.number}: {issue_obj.title}")
                  
                  branch_prefix_to_use = DEFAULT_BRANCH_PREFIX
                  current_issue_label_for_prefix = ISSUE_LABEL_INPUT 
                  
                  if not current_issue_label_for_prefix: 
                      for label_obj in issue_obj.labels:
                          if label_obj.name.lower() in BRANCH_PREFIX_MAP:
                              current_issue_label_for_prefix = label_obj.name.lower()
                              break 
                  
                  if current_issue_label_for_prefix: 
                      branch_prefix_to_use = BRANCH_PREFIX_MAP.get(current_issue_label_for_prefix, DEFAULT_BRANCH_PREFIX)

                  branch_name = f"{branch_prefix_to_use}ai-issue-{issue_obj.number}"
                  print(f"Determined branch name: {branch_name}")
                  
                  print(f"Preparing TARGET_BRANCH ('{TARGET_BRANCH}')...")
                  run_git_command(["git", "fetch", "origin", TARGET_BRANCH])
                  run_git_command(["git", "checkout", TARGET_BRANCH])
                  run_git_command(["git", "reset", "--hard", f"origin/{TARGET_BRANCH}"]) 
                  
                  print(f"Attempting to delete pre-existing local branch '{branch_name}' if any...")
                  run_git_command(["git", "branch", "-D", branch_name], ignore_error=True) 
                  
                  print(f"Creating new local branch '{branch_name}' from '{TARGET_BRANCH}'...")
                  if not run_git_command(["git", "checkout", "-b", branch_name, TARGET_BRANCH]): 
                      print(f"Failed to create or checkout branch {branch_name}. Skipping issue.")
                      run_git_command(["git", "checkout", original_branch_or_commit]) 
                      continue 

                  prompt = (
                      f"You are an expert software developer tasked with fixing a GitHub issue for the repository '{REPO_NWO}'.\n"
                      f"Issue Number: #{issue_obj.number}\n"
                      f"Issue Title: {issue_obj.title}\n"
                      f"Issue Description:\n{issue_obj.body if issue_obj.body else 'No description provided.'}\n\n"
                      f"The following is the content of the project's relevant source files:\n{full_codebase_prompt_context}\n\n"
                      f"Your task is to provide the necessary code changes to resolve this issue based on the provided codebase and issue details.\n"
                      f"Output ONLY the complete new content for each file that needs to be modified.\n"
                      f"Format your response strictly as follows for EACH modified file:\n"
                      f"FILENAME: path/to/your/file.ext\n"
                      f"```[optional_language_specifier_e.g.cpp]\n"
                      f"// New, complete content for the file goes here\n"
                      f"```\n"
                      f"Ensure the file path is relative to the repository root (e.g., src/main.cpp, test/some_test.cpp).\n"
                      f"If multiple files need changes, repeat the FILENAME and code block structure for each.\n"
                      f"If no code changes are needed, or if you cannot resolve the issue, respond with ONLY the text: NO_CHANGES_NEEDED\n"
                  )
                  
                  ai_response = call_gemini_api(prompt)
                  
                  if ai_response and "NO_CHANGES_NEEDED" not in ai_response :
                      print(f"AI Response for issue #{issue_obj.number} (first 500 chars):\n{ai_response[:500]}...") 
                      if parse_and_apply_changes(ai_response, branch_name):
                          print(f"Code changes applied for issue #{issue_obj.number}.")
                          git_status_output = subprocess.run(["git", "status", "--porcelain"], capture_output=True, text=True).stdout.strip()
                          if not git_status_output: 
                              print(f"No actual file changes detected by git status after AI processing for issue #{issue_obj.number}. Skipping commit and PR.")
                              run_git_command(["git", "checkout", TARGET_BRANCH]) 
                              run_git_command(["git", "branch", "-D", branch_name], ignore_error=True)
                              continue

                          if not run_git_command(["git", "add", "."]):
                              print(f"Failed to git add changes for issue #{issue_obj.number}. Cleaning up branch.")
                              run_git_command(["git", "checkout", TARGET_BRANCH]) 
                              run_git_command(["git", "branch", "-D", branch_name], ignore_error=True) 
                              continue

                          commit_message = f"AI fix for issue #{issue_obj.number}: {issue_obj.title}"
                          if not run_git_command(["git", "commit", "-m", commit_message]):
                              print(f"Failed to git commit changes for issue #{issue_obj.number}. Cleaning up branch.")
                              run_git_command(["git", "checkout", TARGET_BRANCH]) 
                              run_git_command(["git", "branch", "-D", branch_name], ignore_error=True)
                              continue
                          
                          run_git_command(["git", "push", "origin", "--delete", branch_name], ignore_error=True)
                          
                          if not run_git_command(["git", "push", "-u", "origin", branch_name]): 
                              print(f"Failed to git push branch {branch_name} for issue #{issue_obj.number}.")
                              run_git_command(["git", "checkout", TARGET_BRANCH])
                              continue
                              
                          if ALLOW_PR_CREATION:
                              pr_title = f"AI Fix for Issue #{issue_obj.number}: {issue_obj.title}"
                              pr_body = (
                                  f"This PR was automatically generated by an AI assistant to address issue #{issue_obj.number}.\n"
                                  f"**Please review the changes carefully.**\n\n"
                                  f"**Issue Details:**\nTitle: {issue_obj.title}\n"
                                  f"Link: {issue_obj.html_url}\n\n"
                                  f"**AI Suggestion Summary (first 500 chars of response):**\n```\n{ai_response[:500]}...\n```\n\n"
                                  f"Fixes #{issue_obj.number}" 
                              )
                              pr_command = [
                                  "gh", "pr", "create",
                                  "--base", TARGET_BRANCH, 
                                  "--head", branch_name,
                                  "--title", pr_title,
                                  "--body", pr_body
                              ]
                              
                              try:
                                  print(f"Creating PR for branch {branch_name} against {TARGET_BRANCH}...")
                                  pr_result = subprocess.run(pr_command, check=True, capture_output=True, text=True)
                                  pr_url = pr_result.stdout.strip()
                                  print(f"Successfully created PR for issue #{issue_obj.number}: {pr_url}")
                                  
                                  comment_body = (
                                      f"🤖 AI Assistant has attempted a fix for this issue.\n"
                                      f"Please review the proposed changes in Pull Request: {pr_url}"
                                  )
                                  try:
                                      issue_obj.create_comment(comment_body)
                                      print(f"Successfully commented on issue #{issue_obj.number} with PR link.")
                                      issue_obj.add_to_labels(AI_PR_CREATED_LABEL)
                                      print(f"Successfully added label '{AI_PR_CREATED_LABEL}' to issue #{issue_obj.number}.")
                                  except GithubException as e_label_comment:
                                      print(f"Failed to comment or add label to issue #{issue_obj.number}: {e_label_comment}")

                              except subprocess.CalledProcessError as e:
                                  print(f"Failed to create PR for issue #{issue_obj.number}. STDERR: {e.stderr.strip()}")
                          else:
                              print(f"PR creation is disabled. Branch {branch_name} pushed for issue #{issue_obj.number}. Manual PR needed.")
                      else: 
                          print(f"No changes applied or error during application for issue #{issue_obj.number}.")
                          run_git_command(["git", "checkout", TARGET_BRANCH]) 
                          run_git_command(["git", "branch", "-D", branch_name], ignore_error=True)
                  elif ai_response and "NO_CHANGES_NEEDED" in ai_response:
                      print(f"AI indicated no changes needed for issue #{issue_obj.number}.")
                      run_git_command(["git", "checkout", TARGET_BRANCH]) 
                      run_git_command(["git", "branch", "-D", branch_name], ignore_error=True)
                  else: 
                      print(f"No response or error from AI for issue #{issue_obj.number}.")
                      run_git_command(["git", "checkout", TARGET_BRANCH]) 
                      run_git_command(["git", "branch", "-D", branch_name], ignore_error=True)
                  
                  print(f"Finished processing issue #{issue_obj.number}.")
                  
                  if MAX_ISSUES_TO_PROCESS > 1 and issues.index(issue_obj) < len(issues) -1 : 
                      print("Waiting for 60 seconds before processing next issue to avoid rate limits...")
                      time.sleep(60)
              
              print(f"Returning to original branch/commit: {original_branch_or_commit}")
              run_git_command(["git", "checkout", original_branch_or_commit], ignore_error=True)
              
              print("AI Issue Resolver run finished.")

          if __name__ == "__main__":
              run_git_command(["git", "config", "--global", "user.name", GIT_COMMIT_USER_NAME])
              run_git_command(["git", "config", "--global", "user.email", GIT_COMMIT_USER_EMAIL])
              main()
          EOF
          chmod +x .github/scripts/ai_issue_processor.py

      - name: Run AI Issue Processor Script
        env: 
          INPUT_ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
          INPUT_ISSUE_LABEL: ${{ github.event.inputs.issue_label }} 
          INPUT_GEMINI_MODEL_OVERRIDE: ${{ github.event.inputs.gemini_model_override }} # Pass the new model override input
          INPUT_MAX_ISSUES_TO_PROCESS: ${{ github.event.inputs.max_issues_to_process }}
          INPUT_ALLOW_PR_CREATION: ${{ github.event.inputs.allow_pr_creation }}
        run: python .github/scripts/ai_issue_processor.py 
