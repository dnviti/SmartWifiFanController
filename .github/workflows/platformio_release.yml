name: Create Release and Build Artifacts

on:
  push:
    branches:
      - "release/v*" # Trigger on branches like release/v1.0.0, release/v1.2.3-alpha

permissions:
  contents: write # Needed to create releases and upload assets

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    env:
      PIO_ENV: esp32_fancontrol # Your PlatformIO environment name from platformio.ini

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9" # PlatformIO recommends Python 3.9+

      - name: Install PlatformIO Core
        run: pip install -U platformio

      - name: Install project dependencies
        run: pio pkg install --global # Installs libraries globally in the runner

      - name: Build Firmware
        run: pio run -e ${{ env.PIO_ENV }}

      - name: Build Filesystem Image
        run: pio run -e ${{ env.PIO_ENV }} --target buildfs

      - name: Get Version from Branch
        id: get_version
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/release/}"
          echo "VERSION_TAG=${BRANCH_NAME}" >> $GITHUB_ENV
        shell: bash

      - name: Determine Asset Names
        id: asset_names
        run: |
          FIRMWARE_NAME="firmware_${{ env.PIO_ENV }}_${{ env.VERSION_TAG }}.bin"
          SPIFFS_NAME="spiffs_${{ env.PIO_ENV }}_${{ env.VERSION_TAG }}.bin"
          echo "FIRMWARE_ASSET_NAME=${FIRMWARE_NAME}" >> $GITHUB_ENV
          echo "SPIFFS_ASSET_NAME=${SPIFFS_NAME}" >> $GITHUB_ENV
          # Copy built files to these new names for clarity in release assets
          cp .pio/build/${{ env.PIO_ENV }}/firmware.bin ${{ env.FIRMWARE_ASSET_NAME }}
          cp .pio/build/${{ env.PIO_ENV }}/spiffs.bin ${{ env.SPIFFS_ASSET_NAME }}
        shell: bash

      - name: Create Release from Branch
        id: create_tagged_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION_TAG }} # This will be the tag created for the release
          name: Release ${{ env.VERSION_TAG }}
          body: |
            Automated release for version ${{ env.VERSION_TAG }} (from branch ${{ github.ref_name }}).
            Contains firmware and SPIFFS filesystem image.
          draft: false
          prerelease: ${{ contains(env.VERSION_TAG, '-') }} # Mark as prerelease if version contains '-' (e.g., v1.0.0-beta)
          files: |
            ${{ env.FIRMWARE_ASSET_NAME }}
            ${{ env.SPIFFS_ASSET_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete 'latest' Release and Tag if they exist
        uses: dev-drprasad/delete-tag-and-release@v1.1
        with:
          tag_name: latest # The tag name to delete
          delete_release: true # Also delete the release associated with the tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true # Continue if the 'latest' tag/release doesn't exist

      - name: Create 'latest' Release
        id: create_latest_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest # This will also create/update a 'latest' tag
          name: Latest Build
          body: |
            This is the latest automated build.
            Based on version: ${{ env.VERSION_TAG }} (from branch ${{ github.ref_name }})
            Contains firmware and SPIFFS filesystem image.
          draft: false
          prerelease: false
          files: |
            ${{ env.FIRMWARE_ASSET_NAME }}
            ${{ env.SPIFFS_ASSET_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
