# .github/workflows/release.yml
name: PlatformIO Release Build & Publish

# Trigger the workflow on push events for tags matching v*.*.* or v*.*.*-*
on:
  push:
    tags:
      - 'v*.*.*'       # Matches v1.0.0, v1.2.3, etc. (Full releases)
      - 'v*.*.*-*'     # Matches v1.0.0-beta.1, v1.2.3-rc.2, etc. (Pre-releases)

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create a release and upload assets

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive' # Ensure submodules are checked out if used

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Specify Python version for PlatformIO

      - name: Install PlatformIO Core
        run: pip install -U platformio

      # Extract version from the Git tag and determine if it's a pre-release
      - name: Get Version and Pre-release Info
        id: version_info
        run: |
          TAG_NAME="${{ github.ref_name }}"
          # VERSION variable (without 'v') can be used if needed by other tools
          VERSION="${TAG_NAME#v}"
          
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          
          if [[ "$TAG_NAME" == *-* ]]; then
            echo "IS_PRERELEASE=true" >> $GITHUB_ENV
            echo "MAKE_LATEST=false" >> $GITHUB_ENV # Pre-releases should not be 'latest'
            echo "RELEASE_NAME=Release ${TAG_NAME} (Pre-release)" >> $GITHUB_ENV
          else
            echo "IS_PRERELEASE=false" >> $GITHUB_ENV
            echo "MAKE_LATEST=true" >> $GITHUB_ENV  # Non-prereleases are marked as latest
            echo "RELEASE_NAME=Release ${TAG_NAME}" >> $GITHUB_ENV
          fi
          echo "Detected Tag: ${TAG_NAME}, Version: ${VERSION}, Pre-release: ${{ env.IS_PRERELEASE }}, Make Latest: ${{ env.MAKE_LATEST }}"

      - name: Cache PlatformIO data
        uses: actions/cache@v4
        with:
          path: |
            ~/.platformio/packages
            ~/.platformio/platforms
          key: ${{ runner.os }}-platformio-${{ hashFiles('**/platformio.ini') }}

      # Prepare data directory and download the CA certificate for GitHub API access by the device
      # This CA cert is included in the SPIFFS image for the ESP32's OTA updates from GitHub.
      - name: Prepare data directory and Download CA Certificate
        run: |
          mkdir -p data
          # Using DigiCert Global Root CA as an example. Verify the correct CA for api.github.com.
          curl -L -o data/github_api_ca.pem https://cacerts.digicert.com/DigiCertGlobalRootCA.crt
          echo "CA certificate downloaded to data/github_api_ca.pem"
        env:
          # This filename should match GITHUB_ROOT_CA_FILENAME in src/config.h
          CA_CERT_FILENAME: github_api_ca.pem 

      # Set the PlatformIO build environment name.
      # This must match PIO_BUILD_ENV_NAME in src/config.h and the environment name in platformio.ini
      - name: Set Build Environment Name
        run: echo "PIO_BUILD_ENV_NAME=esp32_fancontrol" >> $GITHUB_ENV

      - name: Build Firmware and SPIFFS Image
        run: |
          echo "Building for PlatformIO environment: ${{ env.PIO_BUILD_ENV_NAME }}"
          # Build firmware
          platformio run -e ${{ env.PIO_BUILD_ENV_NAME }}
          # Build SPIFFS image (this will include the downloaded CA certificate from the data/ directory)
          platformio run -e ${{ env.PIO_BUILD_ENV_NAME }} --target buildfs
        env:
          PLATFORMIO_CI_SRC: ${{ github.workspace }} # Ensures PlatformIO uses the checked-out code

      - name: Prepare Artifacts for Release
        id: prepare_artifacts
        run: |
          mkdir -p release_artifacts
          FW_VERSION_TAG="${{ env.TAG_NAME }}" # Use the full tag like v0.1.2 for filenames
          
          FIRMWARE_PATH=".pio/build/${{ env.PIO_BUILD_ENV_NAME }}/firmware.bin"
          SPIFFS_PATH=".pio/build/${{ env.PIO_BUILD_ENV_NAME }}/spiffs.bin"
          
          if [ ! -f "$FIRMWARE_PATH" ]; then
            echo "Error: Firmware file not found at $FIRMWARE_PATH"
            exit 1
          fi
          if [ ! -f "$SPIFFS_PATH" ]; then
            echo "Error: SPIFFS image file not found at $SPIFFS_PATH"
            exit 1
          fi
          
          cp "$FIRMWARE_PATH" "release_artifacts/firmware_${{ env.PIO_BUILD_ENV_NAME }}_${FW_VERSION_TAG}.bin"
          cp "$SPIFFS_PATH" "release_artifacts/spiffs_${{ env.PIO_BUILD_ENV_NAME }}_${FW_VERSION_TAG}.bin"
          
          echo "Artifacts prepared in release_artifacts/ directory:"
          ls -l release_artifacts
          
          echo "FIRMWARE_ARTIFACT_NAME=firmware_${{ env.PIO_BUILD_ENV_NAME }}_${FW_VERSION_TAG}.bin" >> $GITHUB_OUTPUT
          echo "SPIFFS_ARTIFACT_NAME=spiffs_${{ env.PIO_BUILD_ENV_NAME }}_${FW_VERSION_TAG}.bin" >> $GITHUB_OUTPUT


      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: ${{ env.RELEASE_NAME }}
          body: |
            Automated release for version ${{ env.TAG_NAME }}.
            Firmware and SPIFFS images are attached.
            ${{ env.IS_PRERELEASE == 'true' && 'This is a pre-release.' || '' }}
          draft: false
          prerelease: ${{ env.IS_PRERELEASE }} # True for tags like v1.0.0-beta, false otherwise
          make_latest: ${{ env.MAKE_LATEST }}   # True for non-prereleases, false for pre-releases

      - name: Upload Firmware Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release_artifacts/${{ steps.prepare_artifacts.outputs.FIRMWARE_ARTIFACT_NAME }}
          asset_name: ${{ steps.prepare_artifacts.outputs.FIRMWARE_ARTIFACT_NAME }}
          asset_content_type: application/octet-stream

      - name: Upload SPIFFS Image Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release_artifacts/${{ steps.prepare_artifacts.outputs.SPIFFS_ARTIFACT_NAME }}
          asset_name: ${{ steps.prepare_artifacts.outputs.SPIFFS_ARTIFACT_NAME }}
          asset_content_type: application/octet-stream
