name: PlatformIO CI

# Controls when the workflow will run
on:
  push:
    branches:
      - main
      - develop # You can adjust or remove this if you don't use a 'develop' branch
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Python
      # PlatformIO Core requires Python. Specify a version.
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9" # Or any version compatible with PlatformIO (3.7+)

      # Step 3: Install PlatformIO Core
      - name: Install PlatformIO Core
        run: pip install -U platformio

      # Step 4: Cache PlatformIO data
      # This step helps speed up the workflow by caching PlatformIO's packages,
      # platforms, and project library dependencies.
      - name: Cache PlatformIO data
        uses: actions/cache@v4
        with:
          path: |
            ~/.platformio/packages
            ~/.platformio/platforms
            ~/.platformio/.cache
            .pio/libdeps # Project-specific library dependencies
          key: ${{ runner.os }}-pio-${{ hashFiles('**/platformio.ini') }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/requirements.txt') }} # More robust key
          restore-keys: |
            ${{ runner.os }}-pio-

      # Step 5: Install project library dependencies
      # This ensures all libraries defined in platformio.ini are installed for the project.
      # While `pio test` can also install dependencies, this step does it explicitly.
      - name: Install project dependencies (libraries)
        run: pio pkg install

      # Step 6: Run PlatformIO Tests
      # This command will compile the code and run the tests.
      # `--verbose` provides more detailed output.
      # `--without-uploading` is good for CI environments as there's no actual hardware to upload to.
      # PlatformIO will attempt to run tests for the environment(s) defined in platformio.ini.
      # For your current setup, it will use the 'upesy_wroom' environment.
      # The unit tests for fan_control.cpp are designed to be host-runnable.
      - name: Run PlatformIO Tests
        run: pio test --verbose --without-uploading
        # If you later add a specific 'native' test environment in your platformio.ini,
        # (e.g., [env:native_test]), you would change the command to:
        # run: pio test -e native_test --verbose --without-uploading
